import numpy as np
import matplotlib.pyplot as plot
from matplotlib import style
import random
style.use('ggplot')


# xs = np.array([1, 2, 3, 4, 5, 6], dtype=np.float64)
# ys = np.array([5, 4, 6, 5, 6, 7], dtype=np.float64)

def generate_xs_and_ys(size, varience, step = 2, correlation = False):
    val = 1
    ys = []
    for i in range(size):
        y = val + random.randrange(-varience, varience)
        ys.append(y)
        if(correlation and correlation == 'pos'):
            val += step
        elif(correlation and correlation == 'neg'):
            val -= step
    xs = [i for i in range(size)]
    return np.array(xs, dtype=np.float64), np.array(ys, dtype=np.float64)

def best_fit_slope_and_intercept(xs, ys):
    m = (np.mean(xs)*np.mean(ys) - np.mean(xs*ys))/((np.mean(xs))**2 - (np.mean(xs**2)))
    b = (np.mean(ys)-m*np.mean(xs))
    return m, b

def squared_error(ys_origin, line):
    return sum((line-ys_origin)**2)

def coefficient_of_determination(ys_origin, line):
    y_mean_line = [np.mean(ys_origin) for y in ys_origin]
    squared_error_regr = squared_error(ys_origin, line)
    squared_error_y_mean = squared_error(ys_origin, y_mean_line)
    return 1 - (squared_error_regr/squared_error_y_mean)

xs, ys = generate_xs_and_ys(40, 40, 2, 'pos')
m,b = best_fit_slope_and_intercept(xs, ys)
regression_line = [(m*x+b) for x in xs]

predict_for = [10, 12, 14]
predicted_result = [(m*x+b )for x in predict_for]

print('r squared: ', coefficient_of_determination(ys, regression_line))

plot.scatter(xs, ys, color='blue')
plot.scatter(predict_for, predicted_result, color='green')
plot.plot(xs, regression_line)
plot.show()
